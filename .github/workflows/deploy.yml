name: Deploy Sacred Relayer to VPS
on:
  push:
    branches: [ dev, master ]

jobs:

  build:
    runs-on: ubuntu-latest 
    steps:
      - name: checkout latest
        uses: actions/checkout@v2 

      - name: Set Environment
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/master' ]]; then
            echo "::set-output name=env_name::production"
            echo "::set-output name=short_env_name::prod"
          elif [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
            echo "::set-output name=env_name::development"
            echo "::set-output name=short_env_name::dev"
          fi
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ steps.set-env.outputs.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build images
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.set-env.outputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    outputs:
      env_name: ${{ steps.set-env.outputs.env_name }}
      image: ${{ steps.build-image.outputs.image }}

  deploy:
    name: Deploy
    needs:
      - build
    runs-on: ubuntu-latest 
    environment: 
      name: ${{ needs.build.outputs.env_name }}

    steps:
      - name: checkout latest
        uses: actions/checkout@v2

      - name: Update Deploy File
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.AWS_PK  }}
          host: ${{ secrets.HOSTS }}
          username: ${{ secrets.AWS_USER }}
          source: "docker-compose-aws.yml"
          target: "relay-deploy"

      - name: Set Env and Redeploy
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.AWS_PK }}
          host: ${{ secrets.HOSTS }}
          username: ${{ secrets.AWS_USER }}
          script: |
            export KOVAN_PK=${{ secrets.KOVAN_PK }}
            export RINKEBY_PK=${{ secrets.RINKEBY_PK }}
            export MAINNET_PK=${{ secrets.MAINNET_PK }}
            export MUMBAI_PK=${{ secrets.MUMBAI_PK }}
            export POLYGON_PK=${{ secrets.POLYGON_PK }}
            export KOVAN_URL=${{ secrets.KOVAN_URL }}
            export RINKEBY_URL=${{ secrets.RINKEBY_URL }}
            export MAINNET_URL=${{ secrets.MAINNET_URL }}
            export MUMBAI_URL=${{ secrets.MUMBAI_URL }}
            export POLYGON_URL=${{ secrets.POLYGON_URL }}
            export ALCHEMY_KEY=${{ secrets.ALCHEMY_KEY }}
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            export AWS_LOGGER_ACCESS_KEY_ID=${{ secrets.AWS_LOGGER_ACCESS_KEY_ID }}
            export AWS_LOGGER_SECRET_ACCESS_KEY=${{ secrets.AWS_LOGGER_SECRET_ACCESS_KEY }}
            export RELAY_IMAGE=${{ steps.build-image.outputs.image }}
            aws configure set region $AWS_REGION
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker compose -f relay-deploy/docker-compose-aws.yml up -d
            docker image prune -af

      - name: Notify
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "${{ github.workflow }} - ${{ needs.build.outputs.env_name }}"
          description: "Sacred Relay V0 deploy ${{ job.status }}\n\nImage `${{ needs.build.outputs.image }}`\n\nLogs available here: https://${{ secrets.AWS_LOGS_REGION }}.console.aws.amazon.com/cloudwatch/home?region=${{ secrets.AWS_LOGS_REGION }}#logsV2:log-groups/log-group/${{ secrets.AWS_LOGS_GROUP }}"